import 'package:apidash/l10n/l10n.dart';
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:apidash/widgets/error_message.dart';
import 'package:apidash/consts.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';

void main() {
  String errorMessage =
      'This is an error message generated by the application ';
  testWidgets('Testing when Error Message is sent', (tester) async {
    late AppLocalizations l10n;
    await tester.pumpWidget(
      MaterialApp(
        localizationsDelegates: L10n.delegates,
        locale: L10n.fallbackLocale,
        title: 'Error Message',
        home: Builder(builder: (context) {
          l10n = AppLocalizations.of(context)!;
          return Scaffold(
            body: ErrorMessage(message: errorMessage),
          );
        }),
      ),
    );

    expect(find.byIcon(Icons.warning_rounded), findsOneWidget);
    expect(find.byType(Center), findsNWidgets(3));
    expect(find.byIcon(Icons.arrow_outward_rounded), findsOneWidget);
    expect(find.byType(SelectableText), findsOneWidget);
    expect(find.text(errorMessage), findsOneWidget);
    expect(find.text('Raise Issue'), findsOneWidget);
    expect(
      find.text('${l10n.kLabelErrorOccoured} $kUnexpectedRaiseIssue'),
      findsNothing,
    );
    final dynamic filledButtonWithIconWidget = tester.widget(
        find.byWidgetPredicate((Widget widget) =>
            '${widget.runtimeType}' == '_FilledButtonWithIcon'));
    expect(find.byType(filledButtonWithIconWidget.runtimeType), findsOneWidget);
    await tester.tap(find.byType(filledButtonWithIconWidget.runtimeType));
  });

  testWidgets('Testing when no error message is sent', (tester) async {
    late AppLocalizations l10n;
    await tester.pumpWidget(
      MaterialApp(
        localizationsDelegates: L10n.delegates,
        locale: L10n.fallbackLocale,
        title: 'Error Message',
        home: Builder(builder: (context) {
          l10n = AppLocalizations.of(context)!;
          return const Scaffold(
            body: ErrorMessage(message: null),
          );
        }),
      ),
    );

    expect(find.byIcon(Icons.warning_rounded), findsOneWidget);
    expect(find.byType(Center), findsNWidgets(3));
    expect(find.byIcon(Icons.arrow_outward_rounded), findsOneWidget);
    expect(find.byType(SelectableText), findsOneWidget);
    expect(find.text(l10n.kLabelRaiseIssue), findsOneWidget);
    expect(find.text(errorMessage), findsNothing);
    expect(
      find.text('${l10n.kLabelErrorOccoured} $kUnexpectedRaiseIssue'),
      findsOneWidget,
    );
    final dynamic filledButtonWithIconWidget = tester.widget(
        find.byWidgetPredicate((Widget widget) =>
            '${widget.runtimeType}' == '_FilledButtonWithIcon'));
    expect(find.byType(filledButtonWithIconWidget.runtimeType), findsOneWidget);
    await tester.tap(find.byType(filledButtonWithIconWidget.runtimeType));
  });
}
